name: Code Quality & Tests

on:
  push:
    branches: ['*']
    tags: ['*']
  pull_request:
    branches: ['*']

permissions:
  contents: write

jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint flake8 bandit pytest pytest-cov
        pip install -e .

    - name: Run pylint
      run: |
        pylint --output-format=text restaurant_model_training/ > pylint.log || echo "Pylint issues found"

    - name: Parse Pylint score and update README badge
      run: |
        PYLINT_SCORE=$(grep "Your code has been rated at" pylint.log | awk '{print $7}' | cut -d'/' -f1)
        sed -i "s/!\[Pylint\](https:\/\/img\.shields\.io\/badge\/Pylint-[0-9.]*-[a-z]*)/![Pylint](https:\/\/img.shields.io\/badge\/Pylint-${PYLINT_SCORE}-blue)/" README.md

    
    - name: Run flake8
      run: flake8 restaurant_model_training/ --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run bandit
      run: bandit -r restaurant_model_training/ -c bandit.yaml -f json -o bandit-results.json || echo "Bandit issues found"
    
    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=restaurant_model_training --cov-report=xml
        
    - name: Update coverage badge in README
      run: |
        # Extract coverage percentage from coverage.xml
        COVERAGE=$(grep -o 'line-rate="[0-9.]*"' coverage.xml | head -1 | cut -d'"' -f2 | awk '{printf "%.0f", $1*100}')
        echo "Coverage: ${COVERAGE}%"
        
        # Determine badge color based on coverage
        if [ "$COVERAGE" -ge 80 ]; then
          COLOR="brightgreen"
        elif [ "$COVERAGE" -ge 60 ]; then
          COLOR="yellow"
        else
          COLOR="red"
        fi
        
        # Update the coverage badge in README.md
        sed -i "s/!\[Coverage\](https:\/\/img\.shields\.io\/badge\/Coverage-[0-9]*%25-[a-z]*)/![Coverage](https:\/\/img.shields.io\/badge\/Coverage-${COVERAGE}%25-${COLOR})/" README.md
        
        echo "## Test Coverage" >> $GITHUB_STEP_SUMMARY
        echo "Coverage: ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
        
    - name: Commit updated README
      if: github.event_name == 'push'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git diff --staged --quiet || git commit -m "Update coverage badge [skip ci]"
        git push || echo "No changes to push"

  versioning: # Determine the new version
    needs: quality
    if: ${{ startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/tags/release' }}
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for given release
        id: set
        run: |
          if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
            echo "CUSTOM_TAG=$NEW_VERSION" >> $GITHUB_ENV
          fi

      - name: Bump version and create tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          fetch_all_tags: true
          default_bump: patch
          custom_tag: ${{ env.CUSTOM_TAG }}
          release_branches: main,master
          tag_prefix: v

      - name: Create GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

      - name: Bump patch and add pre tag
        id: prerelease
        if: github.ref == 'refs/heads/main'
        uses: mathieudutour/github-tag-action@v6.2
        with:
          dry_run: true
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: '_NONE_'
          pre_release_branches: main
          default_prerelease_bump: prerelease
          append_to_pre_release_tag: pre        
          tag_prefix: v
          default_bump: patch

      - name: Bump to next pre-release version
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout main
          git pull origin main

          PRE_VERSION=${{ steps.prerelease.outputs.new_tag }}
          echo "ðŸš€ Creating empty commit for $PRE_VERSION"
          git commit --allow-empty -m "chore: bump version to $PRE_VERSION"
          git tag "$PRE_VERSION"

          git push origin main
          git push origin "$PRE_VERSION"